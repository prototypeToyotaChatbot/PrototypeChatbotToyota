volumes:
  n8n_storage:
  #postgres_storage:
  ollama_storage:
  qdrant_storage:
  pgvector_storage:

networks:
  demo:
    driver: bridge
  my_shared_network:
    driver: bridge
    name: infinitycafe_shared_network  # Nama yang lebih deskriptif
    # Hapus external: true

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=toyota-vector-store
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_PROTOCOL=https
    - NODE_ENV=production
   # - WEBHOOK_URL=https://liberal-relative-panther.ngrok-free.app
    - WEBHOOK_URL=https://${NG_URL}
    - GENERIC_TIMEZONE=Asia/Jakarta
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=host.docker.internal:11434
  env_file:
    - .env

# x-ollama: &service-ollama
#   image: ollama/ollama:latest
#   container_name: ollama
#   networks: ['demo']
#   restart: unless-stopped
#   ports:
#     - 11434:11434
#   volumes:
#     - ollama_storage:/root/.ollama
#     - ./modelfile:/modelfile:ro  # Added shared modelfile directory as read-only
#
# x-init-ollama: &init-ollama
#   image: ollama/ollama:latest
#   networks: ['demo']
#   container_name: ollama-pull-llama
#   volumes:
#     - ./modelfile/cafe.modelfile:/cafe.modelfile   # dari folder `modelfile`
#     - ollama_storage:/root/.ollama
#     - ./modelfile:/modelfile
#   entrypoint: /bin/sh
#   environment:
#     - OLLAMA_HOST=host.docker.internal:11434
#   command:
#     - "-c"
#     - "sleep 3; ollama pull nomic-embed-text"
#
services:
  toyota-workflow-importer:
    <<: *service-n8n
    hostname: toyota-workflow-importer
    container_name: toyota-workflow-importer
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows"
    volumes:
      - ./n8n/demo-data:/demo-data
    depends_on:
      toyota-vector-store:
        condition: service_healthy

  toyota-workflow:
    <<: *service-n8n
    hostname: toyota-workflow
    container_name: toyota-workflow
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/demo-data:/demo-data
      - ./shared:/data/shared
    depends_on:
      toyota-vector-store:
        condition: service_healthy
      toyota-workflow-importer:
        condition: service_completed_successfully


#   ollama-cpu:
#     profiles: ["cpu"]
#     <<: *service-ollama
#
#   ollama-gpu:
#     profiles: ["gpu-nvidia"]
#     <<: *service-ollama
#     networks: ['demo', 'my_shared_network']
#     environment:
#       - OLLAMA_CONTEXT_LENGTH=5000
#       - CUDA_VISIBLE_DEVICES=0
      # - OLLAMA_NUM_PARALLEL=10
      # - OLLAMA_MAX_LOADED_MODELS=2
      # - OLLAMA_FLASH_ATTENTION=true
#       - OLLAMA_KEEP_ALIVE=12h
      # - OLLAMA_NEW_ENGINE=true
      # - OLLAMA_MULTIUSER_CACHE=true
#       - OLLAMA_DEBUG=false
#     deploy:
#       resources:
#         reservations:
#           devices:
#             - driver: nvidia
#               count: 1
#               capabilities: [gpu]
#
#   ollama-gpu-amd:
#     profiles: ["gpu-amd"]
#     <<: *service-ollama
#     image: ollama/ollama:rocm
#     devices:
#       - "/dev/kfd"
#       - "/dev/dri"
#
#   ollama-pull-llama-cpu:
#     profiles: ["cpu"]
#     <<: *init-ollama
#     depends_on:
#       - ollama-cpu
#
#   ollama-pull-llama-gpu:
#     profiles: ["gpu-nvidia"]
#     <<: *init-ollama
#     depends_on:
#       - ollama-gpu
#
#   ollama-pull-llama-gpu-amd:
#     profiles: [gpu-amd]
#     <<: *init-ollama
#     image: ollama/ollama:rocm
#     depends_on:
#      - ollama-gpu-amd
#
  toyota-tunnel:
    image: ngrok/ngrok:latest
    container_name: toyota-tunnel
    restart: unless-stopped
    environment:
      - NGROK_AUTHTOKEN=${NG_CRE}
    command: http --domain=${NG_URL} toyota-workflow:5678
    network_mode: "service:toyota-workflow"
    depends_on:
      toyota-workflow:
        condition: service_started

#   toyota-model-runner:
#     image: ollama/ollama:latest
#     networks: ['demo']
#     container_name: toyota-model-runner
#     depends_on:
#       toyota-workflow:
#         condition: service_started
#     volumes:
#       - ollama_storage:/root/.ollama
#       - ./modelfile:/modelfile
#     entrypoint: /bin/sh
#     environment:
#     - OLLAMA_HOST=host.docker.internal:11434
#     command:
#       - "-c"
#       - "sleep 3; echo 'Creating infinityCafe Model'; ollama create infinityCafe -f /modelfile/cafe.modelfile"
#
  pgadmin:
    image: dpage/pgadmin4
    networks: ['demo']
    hostname: pgadmin
    container_name: toyota-pgadmin
    depends_on:
      toyota-vector-store:
        condition: service_healthy
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    restart: unless-stopped

  toyota-vector-store:
    image: pgvector/pgvector:pg17
    networks: ['demo']
    hostname: toyota-vector-store
    container_name: toyota-vector-store
    ports:
     - 5555:5432
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
    #  - ./pgvector-init.sql:/docker-entrypoint-initdb.d/init.sql
     - pgvector_storage:/var/lib/postgresql/data
     - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h toyota-vector-store -U ${POSTGRES_USER} -d postgres']
      interval: 5s
      timeout: 5s
      retries: 10
    # command: >
    #   bash -c "
    #   until pg_isready -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d postgres; do
    #     echo waiting for PGVECTOR...;
    #     sleep 2;
    #   done &&
    #   psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -tc \"SELECT 1 FROM pg_database WHERE datname = 'n8n2'\" |
    #   grep -q 1 || psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -c 'CREATE DATABASE n8n2'"

  toyota-db-init:
    image: pgvector/pgvector:pg17
    container_name: toyota-db-init
    networks: ['demo']
    depends_on:
      toyota-vector-store:
        condition: service_healthy
    volumes:
      - ./initdb:/initdb
    entrypoint: /bin/sh
    command:
      - -c
      - |
          until pg_isready -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d postgres; do
            echo waiting for PGVECTOR...;
            sleep 2;
          done &&

          echo 'Create Database n8n' &&
          psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'n8n'" |
          grep -q 1 || psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d postgres -c 'CREATE DATABASE n8n' &&



          echo 'Create Database User...' &&
          psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d postgres -tc "SELECT 1 FROM pg_database WHERE datname = '${POSTGRES_DB_USER}'" |
          grep -q 1 || psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d postgres -c 'CREATE DATABASE ${POSTGRES_DB_USER}' &&

          echo 'Create Database Car...' &&
          psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d postgres -tc "SELECT 1 FROM pg_database WHERE datname = '${POSTGRES_DB_CAR}'" |
          grep -q 1 || psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d postgres -c 'CREATE DATABASE ${POSTGRES_DB_CAR}' &&
          
          echo 'All databases created successfully!' &&
          echo 'Initializing vector extension and seeding data...' &&
          
          # Initialize each database with vector extension
          psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d ${POSTGRES_DB_DEFAULT} -c 'CREATE EXTENSION IF NOT EXISTS vector;' &&
          psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d ${POSTGRES_DB_CAR} -c 'CREATE EXTENSION IF NOT EXISTS vector;' &&
          
          # Run seeder for each database (modify seeder.sql accordingly)
          echo 'Seeding databases with initial data...' &&
          psql -v ON_ERROR_STOP=1 -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d ${POSTGRES_DB_DEFAULT} -f /initdb/seeder_db_default.sql &&
          psql -v ON_ERROR_STOP=1 -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d ${POSTGRES_DB_CAR} -f /initdb/seeder_db_car.sql &&

          echo 'Database initialization completed successfully!'
    environment:
      - POSTGRES_DB_DEFAULT=${POSTGRES_DB_DEFAULT}
      - POSTGRES_DB_CAR=${POSTGRES_DB_CAR}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_HOST_AUTH_METHOD=trust


  toyota-user-service:
    networks: ['demo', 'my_shared_network']
    hostname: toyota-user-service
    build:
      context: ./infinity/ 
      dockerfile: user_service/Dockerfile
    container_name: toyota-user-service
    depends_on:
      toyota-vector-store:
        condition: service_healthy
      toyota-workflow-importer:
        condition: service_completed_successfully
    env_file:
      - .env
    ports:
      - "8005:8005" 
    extra_hosts:
      - "ollama:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://toyota-user-service:8005/health"]
      interval: 5s
      timeout: 5s
      retries: 3

  car_service:
    networks: ['demo', 'my_shared_network']
    hostname: car_service
    build:
      context: ./infinity/
      dockerfile: car_service/Dockerfile
    container_name: car_service
    depends_on:
      toyota-vector-store:
        condition: service_healthy
      toyota-workflow-importer:
        condition: service_completed_successfully
    env_file:
      - .env
    ports:
      - "8007:8007"
    extra_hosts:
      - "ollama:host-gateway"
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8007/health')"]
      interval: 5s
      timeout: 5s
      retries: 3

  frontend:
    build:
      context: ./frontend
    container_name: toyota-frontend
    hostname: frontend
    networks: ['demo']
    environment:
      - GATEWAY_URL=http://toyota-gateway:2323
    ports:
      - "7777:3000"
    extra_hosts:
      - "ollama:host-gateway"
    depends_on:
      toyota-gateway:
        condition: service_started
      
  # qwenagent:
  #   networks: ['demo']
  #   hostname: qwenagent
  #   build:
  #     context: ./qwenagent/
  #     dockerfile: Dockerfile
  #   ports:
  #     - "7860:7860"  # Port GUI WebUI, sesuaikan kalau berbeda
  #     - "9000:9000"  # Port untuk API, sesuaikan kalau berbeda
  #   container_name: qwenagent
  #   depends_on:
  #     menu_service:
  #       condition: service_started
  #     kitchen_service:
  #       condition: service_started
  #     order_service:
  #       condition: service_started
  #   env_file:
  #     - .env
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://qwenagent:9000/api/health"]
  #     # interval: 3s
  #     # timeout: 5s
  #     # retries: 0

  toyota-gateway:
    networks: ['demo']
    hostname: toyota-gateway
    container_name: toyota-gateway
    build:
      context: .
      dockerfile: gateway/Dockerfile
    ports:
      - "2323:2323"
    depends_on:
      toyota-user-service:
        condition: service_started
      car_service:
        condition: service_started
    env_file:
      - .env
  
